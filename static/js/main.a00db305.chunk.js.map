{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","a$","from","search$","BehaviorSubject","searchPipe$","pipe","map","x","debounceTime","mergeMap","getPoke","Promise","all","getPokeImage","helloadded$","filter","e","of","delay","a","name","url","axios","get","then","res","data","sprites","front_default","defaultImg","results","resp","_","startsWith","useObservable","obs$","setter","useEffect","mysub","subscribe","unsubscribe","App","document","title","useState","setX","search","setSearch","setResults","className","type","onChange","target","value","next","placeholder","class","src","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,yOCMrCC,EAAKC,YAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAEvBC,EAAU,IAAIC,IACdC,EAAcF,EAAQG,KAC1BC,aAAI,SAAAC,GAAC,OAAIA,KACTC,YAAa,KACbC,aAAS,SAAAF,GAAC,OAAIN,YAAKS,EAAQH,OAC3BE,aAAS,SAAAF,GAAC,OAAIN,YAAKU,QAAQC,IAAIC,EAAaN,SAK1CO,EAAcd,EAAGK,KACnBU,aAAO,SAAAC,GAAC,OAAIA,EAAI,KAChBP,aAAS,SAAAO,GAAC,OAAIC,YAAGD,GAAGX,KAAKa,YAAU,IAAJF,OAC/BV,aAAI,SAAAC,GAAC,MAAI,SAAWA,MAWhBM,EAAe,SAAAN,GAgBnB,OAbgBA,EAAED,IAAF,uCAAM,WAAMU,GAAN,mBAAAG,EAAA,6DACZC,EAAcJ,EAAdI,KAAMC,EAAQL,EAARK,IADM,SAGKC,IACtBC,IAAIF,GACJG,MAAK,SAAAC,GAAG,OACPA,EAAIC,KAAKC,QAAQC,cAAgBH,EAAIC,KAAKC,QAAQC,cAAgB,QANlD,cAGdC,EAHc,yBAUb,CAAET,OAAMS,eAVK,2CAAN,wDAgBZnB,EAAO,uCAAG,WAAMH,GAAN,eAAAY,EAAA,sEAEKG,IAChBC,IAAI,iDACJC,MAAK,SAAAjB,GAAC,OAAIA,EAAEmB,KAAKI,WAJN,cAERC,EAFQ,yBAMPA,EAAKhB,QAAO,SAAAiB,GAAC,OAAIA,EAAEZ,KAAKa,WAAW1B,OAN5B,2CAAH,sDASP2B,EAAgB,SAACC,EAAMC,GAC3BC,qBAAU,WACR,IAAMC,EAAQH,EAAKI,WAAU,SAAAhC,GAC3B6B,EAAO7B,MAGT,OAAO,kBAAM+B,EAAME,iBAClB,CAACL,EAAMC,KAgDGK,MA7Cf,WACEJ,qBAAU,WACRK,SAASC,MAAQ,eAChB,IAHU,MAIKC,mBAAS,MAJd,mBAIHC,GAJG,aAKeD,mBAAS,IALxB,mBAKNE,EALM,KAKEC,EALF,OAMiBH,mBAAS,IAN1B,mBAMNd,EANM,KAMGkB,EANH,KAYb,OAJAd,EAAcpB,EAAa+B,GAE3BX,EAAc9B,EAAa4C,GAGzB,yBAAKC,UAAU,OAGb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gBACb,uDAEF,2BACEC,KAAK,OACLC,SAAU,SAAAnC,GACR+B,EAAU/B,EAAEoC,OAAOC,OACnBnD,EAAQoD,KAAKtC,EAAEoC,OAAOC,QAExBA,MAAOP,EACPS,YAAY,sBAGbzB,EAAQxB,KAAI,SAAAC,GAAC,OACZ,yBAAK0C,UAAU,WACb,yBAAKO,MAAM,iBACT,6BAAMjD,EAAEa,MACR,6BACE,yBAAKqC,IAAKlD,EAAEsB,sBC7FR6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.a00db305.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Observable, of, BehaviorSubject, Subscription, from } from \"rxjs\";\nimport { map, filter, delay, mergeMap, debounceTime } from \"rxjs/operators\";\nimport axios from \"axios\";\nconst a$ = from([1, 2, 3, 4, 5]);\n\nconst search$ = new BehaviorSubject();\nconst searchPipe$ = search$.pipe(\n  map(x => x),\n  debounceTime(750),\n  mergeMap(x => from(getPoke(x))),\n  mergeMap(x => from(Promise.all(getPokeImage(x))))\n);\n\n// const addImages$= searchPipe$.pipe(map(_=>))\n\nlet helloadded$ = a$.pipe(\n  filter(e => e < 5),\n  mergeMap(e => of(e).pipe(delay(e * 300))),\n  map(x => \"Hello \" + x)\n);\n\n// const getBIOS = async x => {\n//   var o = [];\n//   for (let i = 0; i < x; i++) {\n//     o.push({ a: i });\n//   }\n//   return o.filter(x => true);\n// };\n\nconst getPokeImage = x => {\n  // use the poke detail api, each poke object will be a promise because we use async await.\n  //  resolve all promise where invoked\n  const wihtImg = x.map(async e => {\n    const { name, url } = e;\n    // console.log(url);\n    const defaultImg = await axios\n      .get(url)\n      .then(res =>\n        res.data.sprites.front_default ? res.data.sprites.front_default : \"dd\"\n      );\n    // console.log(defaultImg);\n\n    return { name, defaultImg };\n  });\n  // console.log(wihtImg);\n  return wihtImg;\n};\n\nconst getPoke = async x => {\n  // get the details of a pokemon based on the name aka filter\n  const resp = await axios\n    .get(\"https://pokeapi.co/api/v2/pokemon/?limit=3000\")\n    .then(x => x.data.results);\n  // console.log(resp);\n  return resp.filter(_ => _.name.startsWith(x));\n};\n\nconst useObservable = (obs$, setter) => {\n  useEffect(() => {\n    const mysub = obs$.subscribe(x => {\n      setter(x);\n      // console.log(x);\n    });\n    return () => mysub.unsubscribe();\n  }, [obs$, setter]);\n};\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"Rishi Poke\";\n  }, []);\n  const [x, setX] = useState(1212);\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n\n  useObservable(helloadded$, setX);\n  // useObservable(search$, setSearch);\n  useObservable(searchPipe$, setResults);\n\n  return (\n    <div className=\"App\">\n      {/* <div>{x}</div> */}\n\n      <div className=\"box fc\">\n        <div className=\"title1 fr-sb\">\n          <h2>PokeMon - RxJs + React</h2>\n        </div>\n        <input\n          type=\"text\"\n          onChange={e => {\n            setSearch(e.target.value);\n            search$.next(e.target.value);\n          }}\n          value={search}\n          placeholder=\"type pokemon name\"\n        ></input>\n\n        {results.map(x => (\n          <div className=\"poke fc\">\n            <div class=\"pokerow fr-sb\">\n              <div>{x.name}</div>\n              <div>\n                <img src={x.defaultImg} />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}